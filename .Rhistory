blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop(1)
library(tidyverse)
library(tidycensus)
v18 <- load_variables(2018, "acs5", cache = TRUE)
data(fips_codes)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
county_pop <- get_decennial(geography = "county", variables = "P001001") %>% select(-NAME,-variable) %>%
rename(fips = GEOID, pop = value)
county_gini <- get_acs(geography = "county", variables = "B19013_001") %>% select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, gini = estimate)
county_income <- get_acs(geography = "county", variables = "B06011_001") %>% select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, income = estimate)
county_data = merge(x = filter(county_covid19, date == "2020-04-07"), y = county_gini, by = "fips", all.x = TRUE) %>% select(-date,-county,-state)
county_data = merge(x = county_data, y = county_pop, by = "fips", all.x = TRUE)
county_data = merge(x = county_data, y = county_income, by = "fips", all.x = TRUE)
county_data = merge(x = filter(county_covid19, date == "2020-04-07"), y = county_gini, by = "fips", all.x = TRUE) %>% select(-date,-county,-state)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
library(readr)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
library(tidyverse)
library(tidycensus)
library(readr)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
rm(list=ls())
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
library(tidyverse)
library(tidycensus)
library(readr)
v18 <- load_variables(2018, "acs5", cache = TRUE)
data(fips_codes)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
View(county_covid19)
county_pop <- get_decennial(geography = "county", variables = "P001001") %>%
select(-NAME,-variable) %>%
rename(fips = GEOID, pop = value)
county_gini <- get_acs(geography = "county", variables = "B19013_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, gini = estimate)
county_income = get_acs(geography = "county", variables = "B06011_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, income = estimate)
county_data = merge(x = filter(county_covid19, date == "2020-04-07"), y = county_gini, by = "fips", all.x = TRUE) %>%
select(-date,-county,-state)
county_data = merge(x = county_data, y = county_pop, by = "fips", all.x = TRUE)
county_data = merge(x = county_data, y = county_income, by = "fips", all.x = TRUE)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data", row.names = FALSE)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_data.csv", row.names = FALSE)
rm(list=ls())
library(tidyverse)
library(tidycensus)
library(readr)
v18 <- load_variables(2018, "acs5", cache = TRUE)
data(fips_codes)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_covid19.csv", row.names = FALSE)
county_pop = get_decennial(geography = "county", variables = "P001001") %>%
select(-NAME,-variable) %>%
rename(fips = GEOID, pop = value)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_pop.csv", row.names = FALSE)
county_gini = get_acs(geography = "county", variables = "B19013_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, gini = estimate)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_gini.csv", row.names = FALSE)
county_income = get_acs(geography = "county", variables = "B06011_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, income = estimate)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_income.csv", row.names = FALSE)
library(tidyverse)
library(tidycensus)
library(readr)
v18 <- load_variables(2018, "acs5", cache = TRUE)
data(fips_codes)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_covid19.csv", row.names = FALSE)
county_pop = get_decennial(geography = "county", variables = "P001001") %>%
select(-NAME,-variable) %>%
rename(fips = GEOID, pop = value)
write.csv(county_pop, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_pop.csv", row.names = FALSE)
county_gini = get_acs(geography = "county", variables = "B19013_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, gini = estimate)
write.csv(county_gini, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_gini.csv", row.names = FALSE)
county_income = get_acs(geography = "county", variables = "B06011_001") %>%
select(-NAME,-variable,-moe) %>%
rename(fips = GEOID, income = estimate)
write.csv(county_income, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_income.csv", row.names = FALSE)
View(county_pop)
View(county_covid19)
View(v18)
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_covid19.csv", row.names = FALSE)
county_covid19 = read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
write.csv(county_data, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_covid19.csv", row.names = FALSE)
write.csv(county_covid19, "C:/Users/fgreve/Dropbox/CV/Compass/prueba/data/county_covid19.csv", row.names = FALSE)
rm(list=ls())
blogdown::serve_site()
blogdown::hugo_version()
servr::daemon_stop(1)
install.packages("blogdown")
blogdown::serve_site()
blogdown:::new_post_addin()
library(blogdown)
blogdown:::new_post_addin()
install.packages("miniUI")
blogdown:::new_post_addin()
library(imfr)
library(imfr)
imf_databases<-imf_ids()
imf_databases
DOT_codelist<-imf_codelist(database_id = "DOT")
DOT_codelist
DOT_FREQ_codes<-imf_codes(codelist = "CL_FREQ")
DOT_FREQ_codes
DOT_AREA_codes<-imf_codes(codelist = "CL_AREA_DOT")
DOT_AREA_codes
DOT_INDICATOR_codes<-imf_codes(codelist = "CL_INDICATOR_DOT")
DOT_INDICATOR_codes
IFS_codelist<-imf_codelist(database_id = "IFS")
IFS_codelist
IFS_INDICATOR_codes<-imf_codes(codelist = "CL_INDICATOR_IFS")
IFS_INDICATOR_codes
library(dplyr)
library(countrycode)
data(codelist)
country_set <- codelist
country_set<- country_set %>%
select(country.name.en , iso2c, iso3c, imf, continent, region) %>% filter(!is.na(imf) & !is.na(iso2c))
country_set
Africa_ISO2<- country_set$iso2c[country_set$continent=="Africa"]
Africa_ISO2
IFS_Africa<-imf_data(database_id = "IFS",indicator = c("BG_BP6_USD" , "LE_PE_NUM" , "EREER_IX" , "FMA_XDC"), country = Africa_ISO2, freq = 'A', start = 1990 , end = current_year())
IFS_Africa
Eastern_Asia_ISO2<- c("CN", "JP" , "KR")
DOT_Eastern_Asia <- imf_data(database_id = "DOT" , indicator = c("TXG_FOB_USD") , country = Eastern_Asia_ISO2 , start = 2010, end = current_year(), return_raw = TRUE)
DOT_Eastern_Asia_Data <- DOT_Eastern_Asia$CompactData$DataSet$Series
library(tidyr) # unnest()
DOT_Eastern_Asia_Data <- DOT_Eastern_Asia_Data %>%
filter(`@FREQ` == "A" & `@COUNTERPART_AREA` %in% Africa_ISO2) %>% unnest(Obs) %>%
arrange(`@REF_AREA`, `@COUNTERPART_AREA`)
DOT_Eastern_Asia_Data
library(CoordinateCleaner)
data(countryref)
Long_Lat <-countryref %>%
filter(type == "country" & iso2 %in% Africa_ISO2) %>%
select(iso2, "destination_lon" = centroid.lon , "destination_lat"= centroid.lat, capital.lon, capital.lat) %>%
distinct(capital.lat, .keep_all = TRUE) %>%
mutate(China_Lat = 35.00000000, China_Long = 105.000) %>% rename("destination" = iso2)
Long_Lat
Chines_X_Flow <- DOT_Eastern_Asia_Data %>%
filter(`@REF_AREA`== "CN" & `@TIME_PERIOD` == 2018) %>%
select("origin" = `@REF_AREA`, "destination" = `@COUNTERPART_AREA`, "Export_Value" =`@OBS_VALUE`) %>%
left_join(. , Long_Lat)
Chines_X_Flow$Export_Value <- as.numeric(Chines_X_Flow$Export_Value)/1000
library(leaflet)
library(leaflet.minicharts) # addFlows()
leaflet() %>%
addTiles() %>%
addFlows(lng0 = Chines_X_Flow$China_Long ,
lat0 = Chines_X_Flow$China_Lat  ,
lng1 = Chines_X_Flow$destination_lon ,
lat1 = Chines_X_Flow$destination_lat ,
flow = Chines_X_Flow$Export_Value ,
dir = 1,
minThickness = 0.1,
maxThickness = 2.5)
imf_databases<-imf_ids()
library(rmarkdown)
library(rmarkdown)
paged_table(imf_databases)
imf_databases<-imf_ids()
imf_databases<-imf_ids()
DOT_codelist<-imf_codelist(database_id = "DOT")
DOT_codelist<-imf_codelist(database_id = "DOT")
library(imfr)
imf_databases<-imf_ids()
library(rmarkdown)
paged_table(imf_databases)
DOT_codelist<-imf_codelist(database_id = "DOT")
DOT_codelist
DOT_FREQ_codes<-imf_codes(codelist = "CL_FREQ")
DOT_FREQ_codes
DOT_AREA_codes<-imf_codes(codelist = "CL_AREA_DOT")
DOT_AREA_codes
DOT_INDICATOR_codes<-imf_codes(codelist = "CL_INDICATOR_DOT")
DOT_INDICATOR_codes
IFS_codelist<-imf_codelist(database_id = "IFS")
IFS_codelist
IFS_INDICATOR_codes<-imf_codes(codelist = "CL_INDICATOR_IFS")
IFS_INDICATOR_codes
library(dplyr)
library(countrycode)
data(codelist)
country_set <- codelist
country_set<- country_set %>%
select(country.name.en , iso2c, iso3c, imf, continent, region) %>% filter(!is.na(imf) & !is.na(iso2c))
country_set
Africa_ISO2<- country_set$iso2c[country_set$continent=="Africa"]
Africa_ISO2
IFS_Africa<-imf_data(database_id = "IFS",indicator = c("BG_BP6_USD" , "LE_PE_NUM" , "EREER_IX" , "FMA_XDC"), country = Africa_ISO2, freq = 'A', start = 1990 , end = current_year())
IFS_Africa
Eastern_Asia_ISO2<- c("CN", "JP" , "KR")
DOT_Eastern_Asia <- imf_data(database_id = "DOT" , indicator = c("TXG_FOB_USD") , country = Eastern_Asia_ISO2 , start = 2010, end = current_year(), return_raw = TRUE)
DOT_Eastern_Asia_Data <- DOT_Eastern_Asia$CompactData$DataSet$Series
library(tidyr) # unnest()
DOT_Eastern_Asia_Data <- DOT_Eastern_Asia_Data %>%
filter(`@FREQ` == "A" & `@COUNTERPART_AREA` %in% Africa_ISO2) %>% unnest(Obs) %>%
arrange(`@REF_AREA`, `@COUNTERPART_AREA`)
DOT_Eastern_Asia_Data
library(CoordinateCleaner)
data(countryref)
Long_Lat <-countryref %>%
filter(type == "country" & iso2 %in% Africa_ISO2) %>%
select(iso2, "destination_lon" = centroid.lon , "destination_lat"= centroid.lat, capital.lon, capital.lat) %>%
distinct(capital.lat, .keep_all = TRUE) %>%
mutate(China_Lat = 35.00000000, China_Long = 105.000) %>% rename("destination" = iso2)
Long_Lat
Chines_X_Flow <- DOT_Eastern_Asia_Data %>%
filter(`@REF_AREA`== "CN" & `@TIME_PERIOD` == 2018) %>%
select("origin" = `@REF_AREA`, "destination" = `@COUNTERPART_AREA`, "Export_Value" =`@OBS_VALUE`) %>%
left_join(. , Long_Lat)
Chines_X_Flow$Export_Value <- as.numeric(Chines_X_Flow$Export_Value)/1000
library(leaflet)
library(leaflet.minicharts) # addFlows()
leaflet() %>%
addTiles() %>%
addFlows(lng0 = Chines_X_Flow$China_Long ,
lat0 = Chines_X_Flow$China_Lat  ,
lng1 = Chines_X_Flow$destination_lon ,
lat1 = Chines_X_Flow$destination_lat ,
flow = Chines_X_Flow$Export_Value ,
dir = 1,
minThickness = 0.1,
maxThickness = 2.5)
library(rmarkdown)
paged_table(DOT_codelist)
head(DOT_codelist)
head(DOT_AREA_codes)
DOT_AREA_codes<-imf_codes(codelist = "CL_AREA_DOT")
#library(rmarkdown)
#paged_table(imf_databases)
head(imf_databases)
head(DOT_AREA_codes)
DOT_AREA_codes<-imf_codes(codelist = "CL_AREA_DOT")
